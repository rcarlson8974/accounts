plugins {
    id "com.github.ben-manes.versions" version "0.20.0"
    id "com.github.johnrengelman.shadow" version "4.0.3"
    id "com.liferay.app.docker" version "1.0.9"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "net.saliman.cobertura" version "2.5.4"
}

apply plugin:"application"
apply plugin:"groovy"

version "0.0.1-SNAPSHOT"
group "accounts"

//--------------------------------------------------------------------------
// Use this task to see dependency updates available:
//--------------------------------------------------------------------------
// ./gradlew dependencyUpdates -Drevision=release
//--------------------------------------------------------------------------

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.0.2'
    }
}

dependencies {

    compile "cglib:cglib-nodep:3.2.10"
    compile "com.netflix.hollow:hollow:${hollowVersion}"
    compile "com.netflix.hollow:hollow-diff-ui:${hollowVersion}"
    compile "com.netflix.hollow:hollow-explorer-ui:${hollowVersion}"
    compile "io.swagger.core.v3:swagger-annotations:2.0.6"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-management"
    compile "io.micronaut:micronaut-runtime-groovy"
    compile "io.micronaut:micronaut-validation"
    compile "org.codehaus.groovy:groovy-all:2.5.2"
    compile "org.slf4j:slf4j-api:1.8.0-beta2"
    compileOnly "io.micronaut.configuration:micronaut-openapi"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    runtime "ch.qos.logback:logback-classic:1.3.0-alpha4"
    testCompile "com.netflix.hollow:hollow-test:${hollowVersion}"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "io.micronaut:micronaut-inject-java"
    testCompile "junit:junit:4.13-beta-1"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.objenesis:objenesis:3.0.1"
    testCompile("org.spockframework:spock-core:1.2-RC3-groovy-2.5") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
}

task generateHollowDomain(type: JavaExec) {
    main = 'com.os.accounts.hollow.AccountGenerator'
    classpath = sourceSets.main.runtimeClasspath
}

task copyJar(type: Copy) {
    dependsOn build
    from "build/libs/${project.name}-${project.version}-all.jar"
    into 'docker'
    rename { String fileName ->
        fileName.replace("-${project.version}-all", "").replace("${project.name}", "app")
    }
}

shadowJar {
    mergeServiceFiles()
}

processResources {
    filesMatching("**/application.yml") {
        expand(project.properties)
    }
}

cobertura {
    coverageReportDir = new File('cobertura/')
    coverageFormats = ['html', 'xml']
    coverageExcludes = ['.*AccountsApplication.*', '.*com.os.accounts.hollow.domain.*', '.*com.os.accounts.hollow.AccountGenerator.*']
    coverageIgnoreTrivial = true
    coverageCheckLineRate = 100
    coverageCheckTotalLineRate = 100
    coverageCheckHaltOnFailure = true
}

prepareAppDockerImageInputDir {
    finalizedBy copyJar
}

build {
    finalizedBy copyJar
}

buildAppDockerImage {
    inputDir = new File('docker/')
    tag = "gcr.io/os-prod-218112/osaccounts-api:latest"
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "com.os.accounts.AccountsApplication"
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}